import { company, service } from "./auth.model";
import { Model } from "mongoose";
import { trainingReg } from "./interfaces/trainingreg.interace";
import { trainingRegistrationDto } from "./Dto/trainingregistration.dto";
import { serviceRegistrationDto } from "./Dto/serviceRegistration.dto";
import { Training } from "src/training/training.model";
import { companyRegDto } from "./Dto/companyRegDto.dto";
import { registerAdminDto } from "./Dto/admin.dto";
import { Admin } from "./interfaces/admin.interface";
import { LogintDto } from "./Dto/loginAdmin.dto";
import { JwtService } from "@nestjs/jwt";
import { ForgottenPassword } from "./interfaces/forgetpassword.interface";
import { ForgetDto } from "./Dto/forget.dto";
import { ResetpasswordDto } from "./Dto/resetpassword.dto";
export declare class AuthService {
    private readonly trainingModel;
    private readonly serviceRegmodel;
    private readonly companyRegmodel;
    private readonly trainModel;
    private readonly adminModel;
    private readonly forgetModel;
    private jwtService;
    private training;
    private serviceRegistration;
    private companyRegistration;
    private adminRegistration;
    private ForgottenPassword;
    constructor(trainingModel: Model<trainingReg>, serviceRegmodel: Model<service>, companyRegmodel: Model<company>, trainModel: Model<Training>, adminModel: Model<Admin>, forgetModel: Model<ForgottenPassword>, jwtService: JwtService);
    trainingReg(trainingRegDto: trainingRegistrationDto, id: String): Promise<any>;
    trainingRegWithoutAffectation(trainingRegDto: trainingRegistrationDto): Promise<any>;
    serviceReg(serviceRegDto: serviceRegistrationDto): Promise<any>;
    companyReg(companyRegDto: companyRegDto): Promise<any>;
    getAllRgistrations(): Promise<any>;
    pdfFile(file: any, id: any): Promise<service>;
    getpdf(id: any): Promise<service>;
    registerAdmin(adminDto: registerAdminDto): Promise<Admin>;
    loginAdmin(logindto: LogintDto): Promise<string>;
    createJwtPayload(user: any): string;
    forgetpassword(forgetdto: ForgetDto): Promise<boolean>;
    createForgottenPasswordToken(forgetdto: ForgetDto): Promise<ForgottenPassword>;
    resetpassword(id: string, resetpassworddto: ResetpasswordDto): Promise<Admin>;
}
